class Solution {
    public int[] divide(int[] num, int[] nums2, int m, int n, int[] nums1, int idx1, int idx2, int idx) {
        if (idx == m + n) {
            return nums1; // Termination condition: fully merged
        }
        if (idx1 == m) { // If all elements from num are added
            nums1[idx] = nums2[idx2];
            return divide(num, nums2, m, n, nums1, idx1, idx2 + 1, idx + 1);
        }
        if (idx2 == n) { // If all elements from nums2 are added
            nums1[idx] = num[idx1];
            return divide(num, nums2, m, n, nums1, idx1 + 1, idx2, idx + 1);
        }
        if (num[idx1] <= nums2[idx2]) {
            nums1[idx] = num[idx1];
            return divide(num, nums2, m, n, nums1, idx1 + 1, idx2, idx + 1);
        } else {
            nums1[idx] = nums2[idx2];
            return divide(num, nums2, m, n, nums1, idx1, idx2 + 1, idx + 1);
        }
    }

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // Backup nums1 content as `num`
        int[] num = new int[m];
        System.arraycopy(nums1, 0, num, 0, m);
        divide(num, nums2, m, n, nums1, 0, 0, 0);
    }
}
